"""add normalized names

Revision ID: 0ce49eea986a
Revises: de2f370dc136
Create Date: 2025-01-08 19:19:52.668961

"""

from alembic import op
import sqlalchemy as sa
from sqlalchemy.orm import Session
import unicodedata
import re

# revision identifiers, used by Alembic.
revision = "0ce49eea986a"
down_revision = "de2f370dc136"
branch_labels = None
depends_on = None

whitespace = re.compile(r"\s+")
nonletters = re.compile(r"[^a-z 0-9]")


def normalize(name):
    nfkd_form = unicodedata.normalize("NFKD", name)
    only_ascii = nfkd_form.encode("ASCII", "ignore")
    decoded = only_ascii.decode().strip().lower()
    only_letters = nonletters.sub("", decoded)
    single_space = whitespace.sub(" ", only_letters)
    return single_space


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    bind = op.get_bind()
    session = Session(bind=bind)

    with op.batch_alter_table("athletes", schema=None) as batch_op:
        batch_op.add_column(sa.Column("normalized_name", sa.String(), nullable=True))
        batch_op.drop_index("ix_athletes_name")
        batch_op.create_index(
            "ix_athletes_normalized_name", ["normalized_name"], unique=False
        )

    with op.batch_alter_table("events", schema=None) as batch_op:
        batch_op.add_column(sa.Column("normalized_name", sa.String(), nullable=True))
        batch_op.drop_index("ix_events_name")
        batch_op.create_index(
            "ix_events_normalized_name", ["normalized_name"], unique=False
        )

    with op.batch_alter_table("teams", schema=None) as batch_op:
        batch_op.add_column(sa.Column("normalized_name", sa.String(), nullable=True))
        batch_op.drop_index("ix_teams_name")
        batch_op.create_index(
            "ix_teams_normalized_name", ["normalized_name"], unique=False
        )

    athletes = session.execute(
        sa.select(sa.column("id"), sa.column("name")).select_from(sa.table("athletes"))
    ).fetchall()
    for athlete in athletes:
        normalized_name = normalize(athlete.name)
        session.execute(
            sa.update(
                sa.table("athletes", sa.column("id"), sa.column("normalized_name"))
            )
            .where(sa.column("id") == athlete.id)
            .values(normalized_name=normalized_name)
        )

    events = session.execute(
        sa.select(sa.column("id"), sa.column("name")).select_from(sa.table("events"))
    ).fetchall()
    for event in events:
        normalized_name = normalize(event.name)
        session.execute(
            sa.update(sa.table("events", sa.column("id"), sa.column("normalized_name")))
            .where(sa.column("id") == event.id)
            .values(normalized_name=normalized_name)
        )

    teams = session.execute(
        sa.select(sa.column("id"), sa.column("name")).select_from(sa.table("teams"))
    ).fetchall()
    for team in teams:
        normalized_name = normalize(team.name)
        session.execute(
            sa.update(sa.table("teams", sa.column("id"), sa.column("normalized_name")))
            .where(sa.column("id") == team.id)
            .values(normalized_name=normalized_name)
        )

    session.commit()

    with op.batch_alter_table("athletes", schema=None) as batch_op:
        batch_op.alter_column(
            "normalized_name", existing_type=sa.VARCHAR(), nullable=False
        )

    with op.batch_alter_table("events", schema=None) as batch_op:
        batch_op.alter_column(
            "normalized_name", existing_type=sa.VARCHAR(), nullable=False
        )

    with op.batch_alter_table("teams", schema=None) as batch_op:
        batch_op.alter_column(
            "normalized_name", existing_type=sa.VARCHAR(), nullable=False
        )

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###

    with op.batch_alter_table("teams", schema=None) as batch_op:
        batch_op.drop_index("ix_teams_normalized_name")
        batch_op.create_index("ix_teams_name", ["name"], unique=False)
        batch_op.drop_column("normalized_name")

    with op.batch_alter_table("events", schema=None) as batch_op:
        batch_op.drop_index("ix_events_normalized_name")
        batch_op.create_index("ix_events_name", ["name"], unique=False)
        batch_op.drop_column("normalized_name")

    with op.batch_alter_table("athletes", schema=None) as batch_op:
        batch_op.drop_index("ix_athletes_normalized_name")
        batch_op.create_index("ix_athletes_name", ["name"], unique=False)
        batch_op.drop_column("normalized_name")

    # ### end Alembic commands ###
